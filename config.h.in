/*
Calibrator: a software to make calibrations of empirical parameters.

AUTHORS: Javier Burguete and Borja Latorre.

Copyright 2012-2013, AUTHORS.

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

	1. Redistributions of source code must retain the above copyright notice,
		this list of conditions and the following disclaimer.

	2. Redistributions in binary form must reproduce the above copyright notice,
		this list of conditions and the following disclaimer in the
		documentation and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY AUTHORS ``AS IS'' AND ANY EXPRESS OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
SHALL AUTHORS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
OF SUCH DAMAGE.
*/

/**
 * \file config.h
 * \brief Configuration header file.
 * \authors Javier Burguete and Borja Latorre.
 * \copyright Copyright 2013, all rights reserved.
 */
#ifndef CONFIG__H
#define CONFIG__H 1

// Default choices

/**
 * \def DEFAULT_ALGORITHM
 * \brief Macro to set the default algorithm.
 * \def DEFAULT_FORMAT
 * \brief Macro to set the default floating point numbers printing format.
 * \def DEFAULT_RANDOM_SEED
 * \brief Macro to set the default pseudo-random numbers seed.
 */
#define DEFAULT_ALGORITHM "Monte-Carlo"
#define DEFAULT_FORMAT (const xmlChar*)"%le"
#define DEFAULT_RANDOM_SEED 7007

// XML labels

/**
 * \def XML_ALGORITHM algorithm"
 * \def XML_BESTS bests"
 * \def XML_CALIBRATE calibrate"
 * \def XML_EVALUATOR evaluator"
 * \def XML_EXPERIMENT experiment"
 * \def XML_FORMAT format"
 * \def XML_GENETIC genetic"
 * \def XML_ITERATIONS iterations"
 * \def XML_MINIMUM minimum"
 * \def XML_MAXIMUM maximum"
 * \def XML_MONTE_CARLO Monte-Carlo"
 * \def XML_NAME name"
 * \def XML_SIMULATIONS simulations"
 * \def XML_SIMULATOR simulator"
 * \def XML_SWEEP sweep"
 * \def XML_SWEEPS sweeps"
 * \def XML_TEMPLATE1 template1"
 * \def XML_TEMPLATE2 template2"
 * \def XML_TEMPLATE3 template3"
 * \def XML_TEMPLATE4 template4"
 * \def XML_TOLERANCE tolerance"
 * \def XML_VARIABLE variable"
 */
#define XML_ALGORITHM (const xmlChar*)"algorithm"
#define XML_BESTS (const xmlChar*)"bests"
#define XML_CALIBRATE (const xmlChar*)"calibrate"
#define XML_EVALUATOR (const xmlChar*)"evaluator"
#define XML_EXPERIMENT (const xmlChar*)"experiment"
#define XML_FORMAT (const xmlChar*)"format"
#define XML_GENETIC (const xmlChar*)"genetic"
#define XML_ITERATIONS (const xmlChar*)"iterations"
#define XML_MINIMUM (const xmlChar*)"minimum"
#define XML_MAXIMUM (const xmlChar*)"maximum"
#define XML_MONTE_CARLO (const xmlChar*)"Monte-Carlo"
#define XML_NAME (const xmlChar*)"name"
#define XML_SIMULATIONS (const xmlChar*)"simulations"
#define XML_SIMULATOR (const xmlChar*)"simulator"
#define XML_SWEEP (const xmlChar*)"sweep"
#define XML_SWEEPS (const xmlChar*)"sweeps"
#define XML_TEMPLATE1 (const xmlChar*)"template1"
#define XML_TEMPLATE2 (const xmlChar*)"template2"
#define XML_TEMPLATE3 (const xmlChar*)"template3"
#define XML_TEMPLATE4 (const xmlChar*)"template4"
#define XML_TOLERANCE (const xmlChar*)"tolerance"
#define XML_VARIABLE (const xmlChar*)"variable"

#endif
