/*
Calibrator: a software to make calibrations of empirical parameters.

AUTHORS: Javier Burguete and Borja Latorre.

Copyright 2012-2014, AUTHORS.

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

	1. Redistributions of source code must retain the above copyright notice,
		this list of conditions and the following disclaimer.

	2. Redistributions in binary form must reproduce the above copyright notice,
		this list of conditions and the following disclaimer in the
		documentation and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY AUTHORS ``AS IS'' AND ANY EXPRESS OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
SHALL AUTHORS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
OF SUCH DAMAGE.
*/

/**
 * \file config.h
 * \brief Configuration header file.
 * \authors Javier Burguete and Borja Latorre.
 * \copyright Copyright 2012-2014, all rights reserved.
 */
#ifndef CONFIG__H
#define CONFIG__H 1

// Default choices

/**
 * \def DEFAULT_ALGORITHM
 * \brief Macro to set the default algorithm.
 * \def DEFAULT_FORMAT
 * \brief Macro to set the default floating point numbers printing format.
 * \def DEFAULT_RANDOM_SEED
 * \brief Macro to set the default pseudo-random numbers seed.
 */
#define DEFAULT_ALGORITHM "Monte-Carlo"
#define DEFAULT_FORMAT (const xmlChar*)"%le"
#define DEFAULT_RANDOM_SEED 7007

// XML labels

/**
 * \def XML_ALGORITHM
 * \brief algoritm XML label.
 * \def XML_BESTS
 * \brief bests XML label.
 * \def XML_CALIBRATE
 * \brief calibrate XML label.
 * \def XML_EVALUATOR
 * \brief evaluator XML label.
 * \def XML_EXPERIMENT
 * \brief experiment XML label.
 * \def XML_FORMAT
 * \brief format XML label.
 * \def XML_GENETIC
 * \brief genetic XML label.
 * \def XML_ITERATIONS
 * \brief iterations XML label.
 * \def XML_MINIMUM
 * \brief minimum XML label.
 * \def XML_MAXIMUM
 * \brief maximum XML label.
 * \def XML_MONTE_CARLO
 * \brief Monte-Carlo XML label.
 * \def XML_NAME
 * \brief name XML label.
 * \def XML_SIMULATIONS
 * \brief simulations XML label.
 * \def XML_SIMULATOR
 * \brief simulator XML label.
 * \def XML_SWEEP
 * \brief sweep XML label.
 * \def XML_SWEEPS
 * \brief sweeps XML label.
 * \def XML_TEMPLATE1
 * \brief template1 XML label.
 * \def XML_TEMPLATE2
 * \brief template2 XML label.
 * \def XML_TEMPLATE3
 * \brief template3 XML label.
 * \def XML_TEMPLATE4
 * \brief template4 XML label.
 * \def XML_TOLERANCE
 * \brief tolerance XML label.
 * \def XML_VARIABLE
 * \brief variable XML label.
 */
#define XML_ALGORITHM (const xmlChar*)"algorithm"
#define XML_BESTS (const xmlChar*)"bests"
#define XML_CALIBRATE (const xmlChar*)"calibrate"
#define XML_EVALUATOR (const xmlChar*)"evaluator"
#define XML_EXPERIMENT (const xmlChar*)"experiment"
#define XML_FORMAT (const xmlChar*)"format"
#define XML_GENETIC (const xmlChar*)"genetic"
#define XML_ITERATIONS (const xmlChar*)"iterations"
#define XML_MINIMUM (const xmlChar*)"minimum"
#define XML_MAXIMUM (const xmlChar*)"maximum"
#define XML_MONTE_CARLO (const xmlChar*)"Monte-Carlo"
#define XML_NAME (const xmlChar*)"name"
#define XML_SIMULATIONS (const xmlChar*)"simulations"
#define XML_SIMULATOR (const xmlChar*)"simulator"
#define XML_SWEEP (const xmlChar*)"sweep"
#define XML_SWEEPS (const xmlChar*)"sweeps"
#define XML_TEMPLATE1 (const xmlChar*)"template1"
#define XML_TEMPLATE2 (const xmlChar*)"template2"
#define XML_TEMPLATE3 (const xmlChar*)"template3"
#define XML_TEMPLATE4 (const xmlChar*)"template4"
#define XML_TOLERANCE (const xmlChar*)"tolerance"
#define XML_VARIABLE (const xmlChar*)"variable"

#endif
